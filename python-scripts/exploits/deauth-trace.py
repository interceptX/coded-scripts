import socket
import struct
from scapy.all import *

# Set the interface to monitor
INTERFACE = "wlp1s0mon"

# Create a raw socket
sock = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(0x003))

# Bind the socket to the interface
sock.bind((INTERFACE, 0))

print("Deauth detector started. Press Ctrl+C to stop.")

while True:
    # Receive a packet
    packet = sock.recv(2048)

    # Parse the packet
    eth_header = struct.unpack("!6s6sH", packet[:14])
    eth_dst = eth_header[0].hex(":")
    eth_src = eth_header[1].hex(":")
    eth_type = eth_header[2]

    # Check if it's an 802.11 packet
    if eth_type == 0x803:
        # Parse the 802.11 header
        dot11_header = packet[14:24]
        dot11_fc = struct.unpack("!H", dot11_header[:2])[0]
        dot11_subtype = dot11_fc & 0xF

        # Check if it's a deauthentication packet
        if dot11_subtype == 12:
            print("Deauthentication packet detected!")
            print("Source MAC:", eth_src)
            print("Destination MAC:", eth_dst)

            # Attempt to trace the source attacker
            try:
                # Perform a reverse DNS lookup on the source MAC
                mac_vendor = get_mac_vendor(eth_src)
                print("Source MAC vendor:", mac_vendor)

                # Perform a geolocation lookup on the source MAC
                mac_location = get_mac_location(eth_src)
                print("Source MAC location:", mac_location)
            except Exception as e:
                print("Error tracing source attacker:", e)

    # Continue to the next packet
    continue

def get_mac_vendor(mac):
    # Use the `mac-vendor-lookup` library to perform a reverse DNS lookup
    from mac_vendor_lookup import MacLookup
    mac_lookup = MacLookup()
    return mac_lookup.lookup(mac)

def get_mac_location(mac):
    # Use the `mac-lookup` library to perform a geolocation lookup
    from mac_lookup import MacLookup
    mac_lookup = MacLookup()
    return mac_lookup.lookup(mac)
